#include <Arduino.h>
// Oled libraries
#include <Wire.h>
#include <arduinoFFT.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
// Oled features
#define SCREEN_WIDTH 128       // OLED display width, in pixels
#define SCREEN_HEIGHT 32       // OLED display height, in pixels
#define OLED_RESET -1          // (-1 shares reset pin Arduino)
#define SCREEN_ADDRESS_1 0x3C  //0x3C pour 128x32
Adafruit_SSD1306 display1(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

#define SAMPLES 64
double vReal[SAMPLES];
double vImag[SAMPLES];
byte peak;
long maxpeak;
char buf[5];

arduinoFFT FFTC = arduinoFFT();

#define potPin A1

#define FILTER_TAP_NUM 35

//PIN:
const uint32_t buttonRecordingPin = 48;  // Port D4 correspond à la broche PIO_PA29
const uint32_t buttonFrequencyPin = 44;
const uint32_t ledPin = 52;
const uint32_t dacReaderPin = A8;


enum freqState {
  f8k,
  f16k,
  f32k,
  f44k
};

//Recording:
bool isBtnRecordingPressed = false;
bool isRecording = false;
uint32_t currentTime;
uint32_t previousTime;

//Signal analysis:
int filterIndex = 0;
int16_t filterBuffer[FILTER_TAP_NUM];

//Frequency Choice
int samplingFrequency = 44100;
int frequencyState = 3;
bool isBtnFrequencyPressed = false;


static const int16_t filter_taps[FILTER_TAP_NUM] = {
  21546,
  66439,
  51719,
  -22005,
  -17977,
  25148,
  -7355,
  -12632,
  19402,
  -10536,
  -6001,
  18987,
  -19836,
  5683,
  19599,
  -48033,
  70052,
  216511,
  70052,
  -48033,
  19599,
  5683,
  -19836,
  18987,
  -6001,
  -10536,
  19402,
  -12632,
  -7355,
  25148,
  -17977,
  -22005,
  51719,
  66439,
  21546
};

// ADC features
const int bufferSize = 500;
uint16_t adcBuffer[bufferSize];
volatile bool bufferFull = false;

// ADC configuration
void setupADC() {
  PMC->PMC_PCER1 |= PMC_PCER1_PID37;  // Enable the ADC peripheral

  ADC->ADC_CR = ADC_CR_SWRST;                           // Reset ADC
  ADC->ADC_PTCR = (ADC_PTCR_RXTDIS | ADC_PTCR_TXTDIS);  // Reset PDC transfer

  ADC->ADC_MR |= ADC_MR_TRGEN_EN             // Hardware trigger select
                 | ADC_MR_TRGSEL_ADC_TRIG1;  // Trigger by TIOA0
  ADC->ADC_MR = ADC_MR_PRESCAL(255)          // Set the prescaler to 255
                | ADC_MR_STARTUP_SUT64       // Set the startup time to 64 periods of ADC_CLK
                | ADC_MR_TRACKTIM(15)        // Set the tracking time to 15 periods of ADC_CLK
                | ADC_MR_SETTLING_AST3;      // Set the settling time to 17 periods of ADC_CLK
  ADC->ADC_CHER = ADC_CHER_CH7;              // Enable channel 7 (A0)

  ADC->ADC_IDR = ~(1u << 7);  // Désactiver toutes les interruptions sauf celle de CH7
  ADC->ADC_IER = (1u << 7);   // Activer l'interruption pour CH7

  // DMA configuration
  bufferFull = false;

  PMC->PMC_PCER1 |= PMC_PCER1_PID39;  // Active le périphérique PDC
  ADC->ADC_PTCR = ADC_PTCR_RXTDIS | ADC_PTCR_TXTDIS;
  ADC->ADC_RPR = (unsigned long)adcBuffer;  // Adresse de la mémoire de réception
  ADC->ADC_RCR = (unsigned int)bufferSize;  // Nombre d'éléments à recevoir
  ADC->ADC_RNPR = (unsigned long)adcBuffer;                        // Adresse du prochain buffer à charger
  ADC->ADC_RNCR = (unsigned int)bufferSize;                        // Nombre d'éléments du prochain buffer à charger

  NVIC_EnableIRQ(ADC_IRQn);        // Activer l'interruption ADC dans le NVIC
  ADC->ADC_PTCR = ADC_PTCR_RXTEN;  // Activation du transfert de réception du PDC
}

// Timer TC0 channel 0 configuration
void setupTimer() {
  // Configure Timer Counter 0 Channel 0 (TC0) for Fe1
  PMC->PMC_PCER0 |= PMC_PCER0_PID27;                                       // Enable the TC0 peripheral
  TC0->TC_CHANNEL[0].TC_CMR = TC_CMR_TCCLKS_TIMER_CLOCK4 | TC_CMR_CPCTRG;  // Set the clock source to TCLK4 (MCK / 128, 84 MHz / 128 = 656.25 kHz)
  // Enable the RC compare trigger
  // Set the RC value for a Fe1 Hz frequency
  TC0->TC_CHANNEL[0].TC_RC = 656250 / samplingFrequency - 1;
  TC0->TC_CHANNEL[0].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;  // Enable the timer counter and trigger it
  TC0->TC_CHANNEL[0].TC_IER = TC_IER_CPCS;                  // Enable the RC compare interrupt
  NVIC_EnableIRQ(TC0_IRQn);                                 // Enable the TC0_IRQn interrupt in the NVIC
}

// Interruption handler for the TCO timer
void TC0_Handler() {
  // Read the status register to clear the interrupt flag
  TC0->TC_CHANNEL[0].TC_SR;
  // Start a new ADC conversion
  ADC->ADC_CR = ADC_CR_START;
}

// Interruption handler for the ADC
void ADC_Handler() {
  ADC->ADC_CDR[7];
  unsigned long status = ADC->ADC_ISR;
  if (status & ADC_ISR_ENDRX) {
    bufferFull = true;
  }
}

// Display configuration
void setupDisplay1() {
  if (!display1.begin(SSD1306_SWITCHCAPVCC, SCREEN_ADDRESS_1)) {
    Serial.println(F("SSD1306 allocation failed"));
    for (;;)
      ;  // Don't proceed, loop forever
  }
  display1.clearDisplay();
  display1.display();
}

void drawFields() {
  int borderWidth = 2;

  display1.drawRect(0, 0, display1.width() / 2, display1.height() / 3, WHITE);
  display1.fillRect(borderWidth, borderWidth, (display1.width() / 2) - 2 * borderWidth, (display1.height() / 3) - 2 * borderWidth, BLACK);

  display1.drawRect(display1.width() / 2, 0, display1.width() / 2, display1.height() / 3, WHITE);
  display1.fillRect((display1.width() / 2) + borderWidth, borderWidth, (display1.width() / 2) - 2 * borderWidth, (display1.height() / 3) - 2 * borderWidth, BLACK);

  display1.drawRect(0, (display1.height() / 3), display1.width(), display1.height() / 1.4, WHITE);
  display1.fillRect(borderWidth, (display1.height() / 3) + borderWidth, (display1.width()) - 2 * borderWidth, (display1.height() / 1.4) - 2 * borderWidth, WHITE);
}

void drawFe(int Fe) {
  display1.setTextSize(1);               // Normal 1:1 pixel scale
  display1.setTextColor(SSD1306_WHITE);  // Draw white text
  display1.setCursor(2, 2);              // Start at top-left corner
  display1.print("Fe:");                 // Print Fe: on the display
  display1.print(Fe);
  display1.print("Hz");
}

void drawFc(int Fc) {
  display1.setTextSize(1);                            // Normal 1:1 pixel scale
  display1.setTextColor(SSD1306_WHITE);               // Draw white text
  display1.setCursor((display1.width() / 2) + 2, 2);  // Start at the middle for right field
  display1.print("Fc:");                              // Print Fc: on the display
  display1.print(Fc);
  display1.print("Hz");
}

void drawFFT() {
  int16_t x1;
  int16_t y1;
  uint16_t width;
  uint16_t height;

  display1.getTextBounds("FFT", 0, 0, &x1, &y1, &width, &height);

  // display on horizontal and vertical center
  display1.setTextSize(1);
  display1.setTextColor(SSD1306_WHITE);
  display1.setCursor(2, (SCREEN_HEIGHT - height) / 2);
  display1.print("FFT (Filtre RIF: ON)");  // text to display

  // La fonction loop ne fait rien d'autre que d'attendre une interruption
  for (byte i = 0; i < SAMPLES; i++) {
    vReal[i] = adcBuffer[i];
    vImag[i] = 0;
  }
  //FFTC.DCRemoval();
  FFTC.Windowing(vReal, SAMPLES, FFT_WIN_TYP_HAMMING, FFT_FORWARD);
  FFTC.Compute(vReal, vImag, SAMPLES, FFT_FORWARD);
  FFTC.ComplexToMagnitude(vReal, vImag, SAMPLES);
  display1.fillRect(2, 12, display1.width() - 4, display1.height() - 13, BLACK);
  for (byte i = 0; i < SAMPLES / 2 - 3; i++) {
    peak = map(vReal[i+2], 0, 1024, 0, 52);
    display1.fillRect(i * 4 + 6, abs(52 - peak) / 8 + 12, 3, peak / 2, WHITE);
  }
}

void setup() {
  Serial.begin(115200);
  setupDisplay1();
  setupADC();
  setupTimer();
  // Setup buttons and led
  pinMode(ledPin, OUTPUT);
  pinMode(buttonRecordingPin, INPUT);
  pinMode(buttonFrequencyPin, INPUT);
  pinMode(dacReaderPin, INPUT);

  digitalWrite(ledPin, HIGH);  // Led on
                               //previousTime = millis();
}

void loop() {
  //currentTime = millis();
  // Lire l'état du bouton

  /*if (digitalRead(buttonRecordingPin) == HIGH && !isBtnRecordingPressed) {
    isBtnRecordingPressed = true;
  } else {
    isBtnRecordingPressed = false;
  }

  if (isBtnRecordingPressed && !isRecording) {
    previousTime = currentTime;
    isRecording = true;
  }

  if (isRecording) {
    if (currentTime - previousTime < 10000) {
      digitalWrite(ledPin, HIGH);  // Led on
    } else {
      digitalWrite(ledPin, LOW);  // Led off
      isRecording = false;
    }
  }*/

  //Frequency choice:
  int inputFrequencyChoice = digitalRead(buttonFrequencyPin);

  if (!isBtnFrequencyPressed && inputFrequencyChoice == 1) {
    frequencyState = (frequencyState + 1) % 4;
  }

  if (inputFrequencyChoice == 1) {
    isBtnFrequencyPressed = true;
  } else {
    isBtnFrequencyPressed = false;
  }

  if (isBtnFrequencyPressed) {  // When we change sampling frequency
    switch (frequencyState) {
      case f8k:
        {
          samplingFrequency = 8000;
          setupTimer();
          break;
        }
      case f16k:
        {
          samplingFrequency = 16000;
          setupTimer();
          break;
        }
      case f32k:
        {
          samplingFrequency = 32000;
          setupTimer();
          break;
        }
      case f44k:
        {
          samplingFrequency = 44100;
          setupTimer();
          break;
        }
      default:
        {
          samplingFrequency = 44100;
          setupTimer();
          break;
        }
    }
  }

  drawFields();
  drawFe(samplingFrequency);
  drawFc(10000);
  drawFFT();
  display1.display();

  //DAC :
  uint32_t adcValue = ADC->ADC_CDR[7];           //We read the value from the ADC
  analogWrite(DAC1, adcValue);                   // We write the value readed with the ADC on the DAC1 PIN
  uint32_t dacValue = analogRead(dacReaderPin);  //We read the output of the DAC after one resistor(perturbations problems);
  //Serial.println(dacValue); //We write the value in the serial plotter

  if (bufferFull) {
    /*
    for (int i = 0; i < bufferSize; i++) {
      Serial.print("i: ");
     Serial.println(i);
     Serial.println(adcBuffer[i]);
    }
    Serial.println("----------");
    */
    ADC->ADC_RNPR = (unsigned long)adcBuffer;  // Adresse du prochain buffer à charger
    ADC->ADC_RNCR = (unsigned int)bufferSize;  // Nombre d'éléments du prochain buffer à charger
    bufferFull = false;
  }
  //Serial.println(samplingFrequency);
}
